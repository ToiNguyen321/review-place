const express = require("express");
const router = express.Router();
const { User } = require("../../models");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const otpGenerator = require("otp-generator");
const {
  // uPhone: phoneUtils,
  uEmail: emailUtils,
  uResponse,
} = require("../../utils");
const { mailerHelpers } = require("../../helpers");
const authSchema = require("../../schemas/auth.schema");
const { validateRequest } = require("../../middleware/validateMiddleware");
const { mongoose } = require("../../models/database");
const JWT_SECRET = process.env.JWT_SECRET;
const HASH_SALT_ROUNDS = parseInt(process.env.HASH_PASS, 10); // ƒê·ªïi t√™n bi·∫øn ƒë·ªÉ r√µ r√†ng h∆°n v√† ƒë·∫£m b·∫£o ƒë√∫ng ki·ªÉu d·ªØ li·ªáu

// User registration
router.post(
  "/register",
  validateRequest(authSchema.register),
  async (req, res) => {
    const session = await mongoose.startSession();
    session.startTransaction();
    try {
      const { password, phone, email, fullName, slogan } = req.body;
      // return res.json({ success: true })
      // Ki·ªÉm tra th√¥ng tin b·∫Øt bu·ªôc
      // if (!email || !password || !fullName) {
      //   return uResponse.createResponse(
      //     res,
      //     400,
      //     null,
      //     "Missing required information: phone, password, or fullName",
      //     true
      //   );
      // }

      // // Validate s·ªë ƒëi·ªán tho·∫°i
      // if (phone && !phoneUtils.validate(phone)) {
      //   return uResponse.createResponse(
      //     res,
      //     400,
      //     null,
      //     "Invalid phone number format",
      //     true
      //   );
      // }

      // // Validate email n·∫øu c√≥
      // if (!emailUtils.validate(email)) {
      //   return uResponse.createResponse(
      //     res,
      //     400,
      //     null,
      //     "Invalid phone number format",
      //     true
      //   );
      // }

      // Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i hay ch∆∞a
      const userExist = await User.findOne({ phone });
      if (userExist) {
        return uResponse.createResponse(
          res,
          409,
          null,
          "User already exists",
          true
        );
      }

      // Hash password
      const hashedPassword = await bcrypt.hash(password, HASH_SALT_ROUNDS);

      // T·∫°o v√† l∆∞u ng∆∞·ªùi d√πng m·ªõi
      const user = new User({
        password: hashedPassword,
        phone,
        email,
        fullName,
        slogan,
        status: User.STATUS.INACTIVE,
      });
      const data = await user.save({ session });

      // Sau khi l∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o c∆° s·ªü d·ªØ li·ªáu
      if (data) {
        // Sau khi l∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o c∆° s·ªü d·ªØ li·ªáu
        const token = jwt.sign(
          { userId: user._id, role: user.role },
          JWT_SECRET,
          { expiresIn: "1d" }
        );
        const url = `http://${req.headers.host}/api/v1/authenticator/confirm/${token}`;

        let mailOptions = {
          to: user.email,
          subject: "X√°c nh·∫≠n email ƒëƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng üéâ",
          text: `Ch√†o ${user.name},\n\nCh√∫c m·ª´ng b·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng t√†i kho·∫£n t·∫°i ${process.env.APP_NAME}!\n\nƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω v√† k√≠ch ho·∫°t t√†i kho·∫£n, vui l√≤ng nh·∫•n v√†o li√™n k·∫øt sau:\n${url}\n\nN·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.\n\nC·∫£m ∆°n b·∫°n ƒë√£ l·ª±a ch·ªçn ${process.env.APP_NAME}!\n\nTr√¢n tr·ªçng,\nƒê·ªôi ng≈© ${process.env.APP_NAME}`,
          html: `
          <p>Ch√†o ${user.name},</p>
          <p>Ch√∫c m·ª´ng b·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng t√†i kho·∫£n t·∫°i <strong>${process.env.APP_NAME}</strong>!</p>
          <p>ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω v√† k√≠ch ho·∫°t t√†i kho·∫£n, vui l√≤ng nh·∫•n v√†o n√∫t d∆∞·ªõi ƒë√¢y:</p>
          <a href="${url}" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">X√°c nh·∫≠n t√†i kho·∫£n</a>
          <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ l·ª±a ch·ªçn <strong>${process.env.APP_NAME}</strong>!</p>
          <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© <strong>${process.env.APP_NAME}</strong></p>
        `,
        };

        const rsSendMail = await mailerHelpers.sendMail(mailOptions);
        if (!rsSendMail) {
          // Rollback n·∫øu g·ª≠i mail th·∫•t b·∫°i
          await session.abortTransaction();
          session.endSession();
          return uResponse.createResponse(
            res,
            500,
            null,
            "Error sending email",
            true
          );
        }

        await session.commitTransaction();
        session.endSession();

        return uResponse.createResponse(
          res,
          201,
          null,
          "User registered, please check your email to confirm",
          false
        );
      } else {
        await session.abortTransaction();
        session.endSession();
        return uResponse.createResponse(
          res,
          201,
          null,
          "User registered failed",
          false
        );
      }
    } catch (error) {
      await session.abortTransaction();
      session.endSession();
      return uResponse.createResponse(
        res,
        500,
        null,
        "Server error during registration",
        error
      );
    }
  }
);

// User login
router.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;
    // Ki·ªÉm tra th√¥ng tin b·∫Øt bu·ªôc
    if (!username || !password) {
      return uResponse.createResponse(
        res,
        400,
        null,
        "Vui l√≤ng nh·∫≠p t√†i kho·∫£n/m·∫≠t kh·∫©u!",
        true
      );
    }

    //Check username is email or phone number
    let usernameIsEmail = false;
    if (/[a-zA-Z@]/.test(username)) {
      usernameIsEmail = true;
      if (!emailUtils.validate(username)) {
        return uResponse.createResponse(
          res,
          400,
          null,
          "Vui l√≤ng nh·∫≠p email ƒë√∫ng ƒë·ªãnh d·∫°ng",
          true
        );
      }
    }

    // if (!phoneUtils.validate(username)) {
    //   return uResponse.createResponse(
    //     res,
    //     400,
    //     null,
    //     "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë√∫ng ƒë·ªãnh d·∫°ng",
    //     true
    //   );
    // }

    let user = null;

    // if (!usernameIsEmail) {
    //   user = await User.findOne({ phone: username });
    // }
    if (usernameIsEmail) {
      user = await User.findOne({ email: username });
    }
    // T√¨m ki·∫øm ng∆∞·ªùi d√πng
    if (!user) {
      return uResponse.createResponse(
        res,
        401,
        null,
        "T√†i kho·∫£n/M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c, vui l√≤ng th·ª≠ l·∫°i!",
        true
      );
    }

    // So s√°nh m·∫≠t kh·∫©u
    const passwordMatch = await bcrypt.compare(password, user.password);
    if (!passwordMatch) {
      return uResponse.createResponse(
        res,
        401,
        null,
        "T√†i kho·∫£n/M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c, vui l√≤ng th·ª≠ l·∫°i!",
        true
      );
    }

    // Ki·ªÉm tra tr·∫°ng th√°i ng∆∞·ªùi d√πng
    if (user.status === User.STATUS.BLOCK) {
      return uResponse.createResponse(
        res,
        403,
        null,
        "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kho√°, vui l√≤ng li√™n h·ªá trung t√¢m cskh ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£!",
        true
      );
    }

    // T·∫°o JWT token
    const token = jwt.sign(
      { userId: user._id, role: user.role, status: user.status },
      JWT_SECRET,
      {
        expiresIn: "7d",
      }
    );

    // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng k√®m theo token
    return uResponse.createResponse(res, 200, {
      user: {
        _id: user._id,
        phone: user.phone,
        email: user.email,
        fullName: user.fullName,
        slogan: user.slogan,
        role: user.role,
        status: user.status,
        createdAt: user.createdAt,
      },
      token,
    });
  } catch (error) {
    console.log("üöÄ ~ router.post ~ error:", error);
    return uResponse.createResponse(
      res,
      500,
      null,
      "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i!",
      error
    );
  }
});

router.post("/forgot-password", async (req, res) => {
  const { email } = req.body;
  if (!email) {
    return uResponse.createResponse(res, 404, null, "Email is required", true);
  }
  try {
    const user = await User.findOne({ email }).select({
      name: 1,
      _id: 1,
      email: 1,
    });

    if (!user) {
      return uResponse.createResponse(
        res,
        404,
        null,
        "User is not found",
        true
      );
    }

    const OTP = otpGenerator.generate(6, {
      upperCaseAlphabets: false,
      specialChars: false,
    });

    await User.updateOne(
      { _id: user._id },
      {
        $set: {
          passwordResetOtp: OTP,
          passwordResetExpires: Date.now() + 600000, // 10 minutes
        },
      }
    );

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: user.email,
      subject: "Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n üîí",
      text: `
    Ch√†o ${user.name},
    
    B·∫°n v·ª´a y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa m√¨nh t·∫°i ${process.env.APP_NAME}.
    
    M√£ OTP c·ªßa b·∫°n l√†: ${OTP}
    
    Vui l√≤ng nh·∫≠p m√£ n√†y tr√™n m√†n h√¨nh ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·ªÉ ti·∫øp t·ª•c.
    
    L∆∞u √Ω: M√£ OTP n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t.
    
    N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, h√£y b·ªè qua email n√†y. T√†i kho·∫£n c·ªßa b·∫°n s·∫Ω v·∫´n ƒë∆∞·ª£c b·∫£o m·∫≠t.
    
    Tr√¢n tr·ªçng,  
    ƒê·ªôi ng≈© ${process.env.APP_NAME}
      `,
      html: `
        <p>Ch√†o ${user.name},</p>
        <p>B·∫°n v·ª´a y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa m√¨nh t·∫°i <strong>${process.env.APP_NAME}</strong>.</p>
        <p>M√£ OTP c·ªßa b·∫°n l√†: <b style="font-size: 18px; color: #4CAF50;">${OTP}</b></p>
        <p>Vui l√≤ng nh·∫≠p m√£ n√†y tr√™n m√†n h√¨nh ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·ªÉ ti·∫øp t·ª•c.</p>
        <p><strong>L∆∞u √Ω:</strong> M√£ OTP n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t.</p>
        <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, h√£y b·ªè qua email n√†y. T√†i kho·∫£n c·ªßa b·∫°n s·∫Ω v·∫´n ƒë∆∞·ª£c b·∫£o m·∫≠t.</p>
        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© <strong>${process.env.APP_NAME}</strong></p>
      `,
    };

    const rsSendMail = await mailerHelpers.sendMail(mailOptions);
    if (!rsSendMail) {
      return uResponse.createResponse(
        res,
        500,
        null,
        "Error sending email",
        true
      );
    }

    return uResponse.createResponse(
      res,
      201,
      null,
      "User forgot password, please check your email to confirm",
      false
    );
  } catch (error) {
    return uResponse.createResponse(
      res,
      500,
      null,
      "Forgot password failed",
      error
    );
  }
});

router.post(
  "/reset-password",
  validateRequest(authSchema.resetPassword),
  async (req, res) => {
    try {
      const { email, otp, password } = req.body;
      // Hash password
      const user = User.findOne({ email }).select({
        _id: 1,
        passwordResetOtp: 1,
        passwordResetExpires: 1,
        name: 1,
        email: 1,
      });

      if (!user) {
        return uResponse.createResponse(res, 404, null, "User not found", true);
      }

      // Ki·ªÉm tra OTP
      if (!user.passwordResetOtp || user.passwordResetOtp !== otp) {
        return uResponse.createResponse(res, 400, null, "Invalid OTP", true);
      }

      // Ki·ªÉm tra xem OTP ƒë√£ h·∫øt h·∫°n ch∆∞a
      const now = new Date();
      if (now > new Date(user.passwordResetExpires)) {
        return uResponse.createResponse(
          res,
          400,
          null,
          "OTP has expired",
          true
        );
      }

      const hashedPassword = await bcrypt.hash(password, HASH_SALT_ROUNDS);

      await User.updateOne(
        {
          _id: user._id,
        },
        {
          $set: {
            password: hashedPassword,
            passwordResetOtp: null,
            passwordResetExpires: null,
          },
        }
      );

      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: user.email,
        subject: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng ‚úÖ",
        text: `
Ch√†o ${user.name},

B·∫°n ƒë√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa m√¨nh t·∫°i ${process.env.APP_NAME} th√†nh c√¥ng.

N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán h√†nh ƒë·ªông n√†y, vui l√≤ng li√™n h·ªá ngay v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.

ƒê·ªÉ ƒë·∫£m b·∫£o an to√†n, b·∫°n n√™n:
- Kh√¥ng chia s·∫ª th√¥ng tin t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u v·ªõi b·∫•t k·ª≥ ai.
- K√≠ch ho·∫°t b·∫£o m·∫≠t hai l·ªõp (n·∫øu c√≥).
- ƒê·∫£m b·∫£o m·∫≠t kh·∫©u c·ªßa b·∫°n ƒë·ªß m·∫°nh v√† kh√≥ ƒëo√°n.

C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng ${process.env.APP_NAME}.

Tr√¢n tr·ªçng,
ƒê·ªôi ng≈© ${process.env.APP_NAME}
  `,
        html: `
          <p>Ch√†o ${user.fullName},</p>
          <p>B·∫°n ƒë√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa m√¨nh t·∫°i <strong>${process.env.APP_NAME}</strong> th√†nh c√¥ng.</p>
          <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán h√†nh ƒë·ªông n√†y, vui l√≤ng li√™n h·ªá ngay v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</p>
          <p>ƒê·ªÉ ƒë·∫£m b·∫£o an to√†n, b·∫°n n√™n:</p>
          <ul>
            <li>Kh√¥ng chia s·∫ª th√¥ng tin t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u v·ªõi b·∫•t k·ª≥ ai.</li>
            <li>ƒê·∫£m b·∫£o m·∫≠t kh·∫©u c·ªßa b·∫°n ƒë·ªß m·∫°nh v√† kh√≥ ƒëo√°n.</li>
          </ul>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng <strong>${process.env.APP_NAME}</strong>.</p>
          <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© <strong>${process.env.APP_NAME}</strong></p>
        `,
      };

      return uResponse.createResponse(
        res,
        200,
        null,
        "User reset password success",
        false
      );
    } catch (error) {
      return uResponse.createResponse(res, 500, null, "Login failed", error);
    }
  }
);

router.get("/confirm/:token", async (req, res) => {
  try {
    const decoded = jwt.verify(req.params.token, JWT_SECRET);
    await User.findByIdAndUpdate(decoded.userId, {
      status: User.STATUS.VERIFIED_INFO,
    });
    return uResponse.createResponse(res, 200, null, "Email confirmed");
  } catch (error) {
    return uResponse.createResponse(
      res,
      200,
      null,
      "Invalid or expired token",
      error
    );
  }
});

module.exports = router;
